?start: (shebang | comment | dsl | param | module_import | workflow | process | function | channel | function_call )*
// | include | process | workflow

// coew definations
shebang: SH_COMMENT
dsl.2: "nextflow.enable.dsl=" INT
comment: (C_COMMENT | CPP_COMMENT)
module_import: "include" "{" CNAME (";" CNAME)* "}" "from" STRING
param: "params." CNAME "=" value? comment?
//param: /params.(\w+)\s?=\s?/ value? comment?
function: "def" CNAME "(" parameters? ")" "{" code_block "}"
workflow: "workflow" CNAME? "{" workflow_block "}"
//workflow: /workflow\s*?(\S+)?\s*?{(([\s\S])*?)+}/ms
process: "process" CNAME "{" process_block "}"
//process: /process\s*?(\S+)?\s*?(\{(?:[^}{]+|\{(?:[^}{]+|\{[^}{]*\})*\})*\})/ms

// workflow definations
workflow_block: (workflow_input | main | emit)* comment?
workflow_input: "take" ":" CNAME
main: "main"? ":"? comment? (channel | function_call)+
emit: "emit" ":" (wf_output | wf_named_output)+
wf_output: CNAME "." CNAME
wf_named_output: CNAME "=" wf_output
//channel: ("Channel" | "channel") "." channel_type "(" parameters? ")"
//channel_call: ("def" WS_INLINE)? (variable "=")? channel
//function_call: ("def" WS_INLINE)? (variable? "=")? identifier "(" parameters? ")"
channel: /[C|c]hannel\s+(\.(fromList|fromPath|fromFilePairs|fromSRA|from|of|empty|value|watchPath)\(((\S+)(\s+)?,?)?\))/ operator?
function_call:  /((\S+)\s?=)?\s?(\S+)\(((\S+)(\s+)?,?)?\)(\.(\S+))?/
chained_function:  /\s+\.\S+\(((\S+)(\s+)?,?)?\)(\.(\S+))?/
//assignment: variable "=" identifier "(" parameters? ")"
//assignment: /(w+)\s?=\s?(\w+)\(([\s\S]*?)\)/

// process definations
process_block: (input | output | script | shell | directive)* comment?
input: "input:" (val | file | path | env)
output: "output:" (val | file | path | env)
script: "script:"? (bash_script | shell_script | template)
shell: "shell:" shell_script
exec: "exec:" statement
directive: (accelerator | before_script | after_script | cluster_options | conda| cache | cpus | container | container_options | debug | disk | echo | error_strategy | executor | ext | fair | label | machine_type | max_errors | max_forks | max_retries | memory | module penv | pod | publish_dir | queue | resource_labels | scratch | spack | store_dir | stage_in_mode | stage_out_mode | tag | time)

// script constructs
bash_script: /"{3}([\s\S]*?)"{3}/m
shell_script: /'{3}([\s\S]*?)'{3}/m
template: "template" STRING -> script_path

// input/output constructs
val: "val" declaration
file: "file" declaration
path: "path" declaration
env: "env" CNAME -> env_var
stdin: "stdin" declaration?
tuple: "tuple" declaration
each: "each" declaration

// process directives
accelerator: "accelerator" value
before_script: "beforeScript" value
after_script: "afterScript" value
cluster_options: "clusterOptions" value
conda: "conda" value
cache: "cache" value
cpus: "cpus" INT
container: "container" value
container_options: "containerOptions" value
debug: "debug" value
disk: "disk" value
echo: "echo" value
error_strategy: "errorStrategy" value
executor: "executor" value
ext: "ext" value
fair: "fair" value
label: "label" value
machine_type: "machineType" value
max_errors: "maxErrors" value
max_forks: "maxForks" value
max_retries: "maxRetries" value
memory: "memory" NUMBER
module: "module" value
penv: "penv" value
pod: "pod" value
publish_dir: "publishDir" value
queue: "queue" value
resource_labels: "resourceLabels" value
scratch: "scratch" value
spack: "spack" value
store_dir: "storeDir" value
stage_in_mode: "stageInMode" value
stage_out_mode: "stageOutMode" value
tag: "tag" value
time: "time" value

// GENERAL
parameters: arg ("," arg)*
arg: CNAME ( "." CNAME )?
variable: CNAME
identifier: CNAME
declaration: CNAME | STRING
value:  FLOAT -> float
        | INT -> int
        | SQUOTED_STRING -> string
        | DQUOTED_STRING -> string
code_block: /[^}]+/
statement:  /[^\s]+/
PATH: /'[^']*'|"[^"]*"/
unknown_entry: /[^\n]+\n/
STRING: SQUOTED_STRING | DQUOTED_STRING
SQUOTED_STRING: /'[^']*'/
DQUOTED_STRING: /"[^"]*"/

// channels
//channel_type: "fromList" | "fromPath" | "fromFilePairs" | "fromSRA" | "from" | "of" | "empty" | "value" | "watchPath"

// directive_value: VALUE WS_INLINE? ("," option)?

// channel operators
operator: /\s?\.branch\s?\{(.*)\}/sm -> branch  
        | /\s?\.buffer\s?\{(.*)\}/sm | /\s?\.buffer\s?\((.*)\)/sm -> buffer 
        | /\s?\.collate\s?\((.*)\)/sm -> collate 
        | /\s?\.collect\s?\{(.*)\}/sm | /\s?\.collect\s?\((.*)\)/sm -> collect 
        | /\s?\.collectFile\s?\{(.*)\}/sm | /\s?\.collectFile\s?\((.*)\)/sm -> collect_file 
        | /\s?\.combine\s?\((.*)\)/sm -> combine 
        | /\s?\.concat\s?\((.*)\)/sm -> concat 
        | /\s?\.count\s?\{(.*)\}/sm | /\s?\.count\s?\((.*)\)/sm -> count 
        | /\s?\.countFasta\s?\{(.*)\}/sm | /\s?\.countFasta\s?\((.*)\)/sm -> count_fasta 
        | /\s?\.countJson\s?\{(.*)\}/sm | /\s?\.countJson\s?\((.*)\)/sm -> count_json 
        | /\s?\.countLines\s?\{(.*)\}/sm | /\s?\.countLines\s?\((.*)\)/sm -> count_lines 
        | /\s?\.cross\s?\{(.*)\}/sm | /\s?\.cross\s?\((.*)\)/sm -> cross 
        | /\s?\.distinct\s?\{(.*)\}/sm | /\s?\.distinct\s?\((.*)\)/sm -> distinct 
        | /\s?\.dump\s?\((.*)\)/sm -> dump 
        | /\s?\.filter\s?\{(.*)\}/sm | /\s?\.filter\s?\((.*)\)/sm -> filter 
        | /\s?\.first\s?\{(.*)\}/sm | /\s?\.first\s?\((.*)\)/sm -> first 
        | /\s?\.flatMap\s?\{(.*)\}/sm | /\s?\.flatMap\s?\((.*)\)/sm -> flat_map
        | /\s?\.flatten\s?\(\)/sm -> flatten
        | /\s?\.groupTuple\s?\{(.*)\}/sm | /\s?\.groupTuple\s?\((.*)\)/sm -> group_tuple
        | /\s?\.ifEmpty\s?\{(.*)\}/sm | /\s?\.ifEmpty\s?\((.*)\)/sm -> if_empty
        | /\s?\.join\s?\((.*)\)/sm -> join
        | /\s?\.last\s?\((.*)\)/sm -> last
        | /\s?\.map\s?\{(.*)\}/sm | /\s?\.map\s?\((.*)\)/sm -> map
        | /\s?\.max\s?\{(.*)\}/sm | /\s?\.max\s?\((.*)\)/sm -> max
        | /\s?\.merge\s?\{(.*)\}/sm | /\s?\.merge\s?\((.*)\)/sm -> merge
        | /\s?\.min\s?\{(.*)\}/sm | /\s?\.min\s?\((.*)\)/sm -> min
        | /\s?\.mix\s?\((.*)\)/sm -> mix
        | /\s?\.multiMap\s?\{(.*)\}/sm | /\s?\.multiMap\s?\((.*)\)/sm -> multi_map
        | /\s?\.randomSample\s?\{(.*)\}/sm | /\s?\.randomSample\s?\((.*)\)/sm -> random_sample
        | /\s?\.reduce\s?\{(.*)\}/sm | /\s?\.reduce\s?\((.*)\)/sm -> reduce
        | /\s?\.set\s?\{([\s\S]*)?\}/sm -> set
        | /\s?\.splitCsv\s?\{(.*)\}/sm | /\s?\.splitCsv\s?\((.*)\)/sm -> split_csv
        | /\s?\.splitFasta\s?\{([\s\S]*)?\}/sm | /\s?\.splitFasta\s?\(([\s\S]*)?\)/sm -> split_fasta
        | /\s?\.splitFastq\s?\{(.*)\}/sm | /\s?\.splitFastq\s?\((.*)\)/sm -> split_fastq
        | /\s?\.splitJson\s?\{(.*)\}/sm | /\s?\.splitJson\s?\((.*)\)/sm -> split_json
        | /\s?\.splitText\s?\{(.*)\}/sm | /\s?\.splitText\s?\((.*)\)/sm -> split_text
        | /\s?\.subscribe\s?\{(.*)\}/sm | /\s?\.subscribe\s?\((.*)\)/sm -> subscribe
        | /\s?\.sum\s?\{(.*)\}/sm | /\s?\.sum\s?\((.*)\)/sm -> sum
        | /\s?\.take\s?\{(.*)\}/sm | /\s?\.take\s?\((.*)\)/sm -> take
        | /\s?\.tap\s?\{(.*)\}/sm | /\s?\.tap\s?\((.*)\)/sm -> tap
        | /\s?\.toInteger\s?\(\s?\)/sm -> to_integer
        | /\s?\.toLong\s?\(\s?\)/sm -> to_long
        | /\s?\.toFloat\s?\(\s?\)/sm -> to_float
        | /\s?\.toDouble\s?\(\s?\)/sm -> to_double
        | /\s?\.toList\s?\(\s?\)/sm -> to_list
        | /\s?\.toSortedList\s?\(\s?\)/sm -> to_sorted_list
        | /\s?\.transpose\s?\((.*)\)/sm -> transpose
        | /\s?\.unique\s?\{(.*)\}/sm |  /\s?\.unique\s?\((.*)\)/sm -> unique
        | /\s?\.until\s?\{(.*)\}/sm |  /\s?\.until\s?\((.*)\)/sm -> until
        | /\s?\.view\s?\{(.*)\}/sm |  /\s?\.view\s?\((.*)\)/sm -> view


%import common.CNAME
%import common.SH_COMMENT
%import common.C_COMMENT
%import common.CPP_COMMENT
%import common.ESCAPED_STRING
%import common.ESCAPED_CHAR
%import common.WS
%import common.WS_INLINE
%import common.NEWLINE
%import common.SIGNED_INT
%import common.FLOAT
%import common.NUMBER
%import common.INT
%import common.SIGNED_NUMBER

%ignore WS
%ignore NEWLINE